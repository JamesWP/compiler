%start translation_unit
%%
translation_unit
    : external_declaration
    | translation_unit external_declaration
    ;

external_declaration
    : function_definition
    | declaration
    ;

function_definition
    : declaration_specifiers declarator compound_statement
    ;

declaration_specifiers
    : type_specifier
    ;

type_qualifier
    : CONST
    | VOLATILE
    ;

type_specifier
    : VOID
    | CHAR
    | SHORT
    | INT
    ;

declarator
    : pointer direct_declarator
    | direct_declarator
    ;

direct_declarator
    : IDENTIFIER
    | direct_declarator '(' parameter_type_list ')'
    | direct_declarator '(' ')'
    ;

pointer
    : '*'
    ;

parameter_type_list
    : parameter_list
    ;

parameter_list
    : parameter_declaration
    | parameter_list ',' parameter_declaration
    ;

parameter_declaration
    : declaration_specifiers declarator
    ;

constant_expression
    : VALUE
    ;

identifier_list
    : IDENTIFIER
    | identifier_list ',' IDENTIFIER
    ;

init_declarator_list
    : init_declarator
    | init_declarator_list ',' init_declarator
    ;

init_declarator
    : declarator
    | declarator '=' initializer
    ;

initializer
    : constant_expression
    | '{' initializer_list '}'
    | '{' initializer_list ',' '}'
    ;

initializer_list
    : initializer
    | initializer_list ',' initializer
    ;

assignment_operator
    : '='
    | '*='
    | '+='
    ;

cast_expression
    : unary_expression
    | '(' type_name ')' cast_expression
    ;

additive_expression
    : unary_expression
    | additive_expression '+' unary_expressionr
    | additive_expression '-' unary_expressionr
    ;

primary_expression
    : IDENTIFIER
    | CONSTANT
    | STRING_LITERAL
    | '(' expression ')'
    ;

postfix_expression
    : primary_expression
    | postfix_expression '[' expression ']'
    | postfix_expression '(' ')'
    | postfix_expression '(' argument_expression_list ')'
    ;

argument_expression_list
    : additive_expression
    | argument_expression_list ',' additive_expression
    ;

unary_expression
    : postfix_expression
    | unary_operator cast_expression
    ;

unary_operator
    : '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

statement
    : compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    ;

compound_statement
    : '{' '}'
    | '{' statement_list '}'
    | '{' declaration_list '}'
    | '{' declaration_list statement_list '}'
    ;

declaration_list
    : declaration
    | declaration_list declaration
    ;

statement_list
    : statement
    | statement_list statement
    ;

expression_statement
    : ';'
    | expression ';'
    ;

selection_statement
    : IF '(' expression ')' statement
    | IF '(' expression ')' statement ELSE statement
    | SWITCH '(' expression ')' statement
    ;

iteration_statement
    : WHILE '(' expression ')' statement
    ;

// tokens
ELLIPSIS
IDENTIFIER
CONST
VOLATILE
VOID
CHAR
SHORT
INT
PAREN
COMMA
POINTER
EQUALS
%%
