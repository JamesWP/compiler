# Begin output
        .text

        .type main, @function
        .global main
main:
        pushq    %rbp
        movq     %rsp, %rbp
# Assigning argc to StackRelativeLocation { reg: RBP, offset: -4, size: 4 }
        movl     %edi, -4(%rbp)
# Assigning argv to StackRelativeLocation { reg: RBP, offset: -16, size: 8 }
        mov      %rsi, -16(%rbp)
# Assigned return_value to StackRelativeLocation { reg: RBP, offset: -20, size: 4 }
# StackLayout { stack_size: 24, stack_diagram: "111100002222222233330000........" }
        subq     $24, %rsp
# Expression(Expression { expr_type: INT {
        lea      intern_01(%rip), %rax
        push     %rax
        pop      %rdi
        sub      $8, %rsp # allign the stack
        mov      printf@GOTPCREL(%rip), %rax
        mov      %rax, %rbx
        xor      %eax, %eax
        call     *%rbx
# Expression(Expression { expr_type: INT {
        lea      intern_02(%rip), %rax
        push     %rax
        pop      %rdi
        mov      printf@GOTPCREL(%rip), %rax
        mov      %rax, %rbx
        xor      %eax, %eax
        call     *%rbx
# DeclarationStatement(DeclarationStatemen
        lea      -20(%rbp), %rax
        push     %rax
        movl     $123, %eax
        push     %rax
        pop      %rdi
        mov      foo@GOTPCREL(%rip), %rax
        call     *%rax
        mov      0(%rsp), %rdi
        movl     %eax, (%rdi)
        add      $8, %rsp
# Expression(Expression { expr_type: INT {
        lea      intern_03(%rip), %rax
        push     %rax
        lea      -20(%rbp), %rax
        movl     (%rax), %eax
        push     %rax
        pop      %rsi
        pop      %rdi
        mov      printf@GOTPCREL(%rip), %rax
        mov      %rax, %rbx
        xor      %eax, %eax
        call     *%rbx
# JumpStatement(ReturnWithValue(Expression
        lea      -20(%rbp), %rax
        movl     (%rax), %eax
        movq     %rbp, %rsp
        pop      %rbp
        ret      
# Data time!
        .data
intern_03:
.asciz "return value is %d\n"
intern_01:
.asciz "Hello world\n"
intern_02:
.asciz "Calling foo with 123\n"
# generated by:  target/debug/compiler examples/01_main.c -a
# End output

